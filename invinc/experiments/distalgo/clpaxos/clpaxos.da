# Changes from Distalgo source tree:
# - added Controller
# - changed acceptors/proposers fields to use runtimelib
#   and copy from param
# - renamed some process variables and local variables so that
#   they don't clash in the inc module's global namespace

import sys
controller = import_da('controller')
import runtimelib

class Proposer(process, controller.Controllee):
    def setup(ctl, _acceptors, prop_quorumsize, prop_f, nrounds, timeout):
        super().setup(ctl)
        self.propNum = (0, self.id)          # Current proposal(ballot) number
        self.propVal = self.id          # Own value to propose
        self.acceptors = runtimelib.Set()
        self.acceptors.update(_acceptors)

    def ctl_begin(): super().ctl_begin()
    def ctl_end(): super().ctl_end()

    def main():
        ctl_begin()

        count = 0
        while count < nrounds:
            work()
            --prepare
            send(('Prepare', propNum, self.id), to=acceptors)
            if await(len(setof(a, received(('Promise', _propNum, _, _, a)))) > prop_quorumsize):
                --propose
                voted = max(setof((n, v),
                                  received(('Promise', _propNum, n, v, _)),
                                  has=(len(setof(a, received(('Promise', _propNum, n, v, a)))) > prop_f)) |
                            {((-1, self.id), propVal)})[1]

                send(('OneC', propNum, voted, self.id), to=acceptors)
                if await(len(setof(a, received(('TwoAv', _propNum, _voted, a)))) > prop_quorumsize):
                    --end
                    output("Succeeded proposing %r" % voted)
                    count += 1
                    continue
                elif timeout(timeout):
                    output("Failed to Propose in time, retrying.")
            elif timeout(timeout):
                output("Failed to Prepare in time, retrying.")
            propNum = (propNum[0] + 1, self.id)
        send(('Done',), to=acceptors)

        ctl_end()

class Acceptor(process, controller.Controllee):
    def setup(ctl, _acceptors, _proposers, acc_quorumsize, acc_f):
        super().setup(ctl)
        self.acceptors = runtimelib.Set()
        self.acceptors.update(_acceptors)
        self.proposers = runtimelib.Set()
        self.proposers.update(_proposers)
        self.peers = acceptors | proposers

    def ctl_begin(): super().ctl_begin()
    def ctl_end(): super().ctl_end()

    def main():
        ctl_begin()

        while True:
            if await(some(received(('TwoAV', n, v, _)),
                          has=(len(setof(a, received(('TwoAV', n, v, a)))) > acc_quorumsize and
                               not sent(('TwoB', n, v))))):
                send(('TwoB', n, v), to=peers)
            elif each(p in proposers, has=received(('Done',), from_=p)):
                break

        ctl_end()

    def receive(msg=('Prepare', n, p)):
        if n > maxpromised():
            vn, vv = max(setof((vpn, vv), sent(('TwoAv', vpn, vv, self.id))) |
                         {((-1, self.id), None)})
            send(('Promise', n, vn, vv, self.id), to=peers)

    def receive(msg=('OneC', n2, v, p)):
        if (n2 >= maxpromised() and islegal(n2, v) and
                (not some(sent(('TwoAv', _n2, _, self.id))))):
            send(('TwoAv', n2, v, self.id), to=peers)

    def maxpromised():
        return max(setof(n, sent(('Promise', n, _, _, _))) | {(-2, self.id)})

    def islegal(n, v):
        voted = setof((vn, vv), received(('Promise', _n, vn, vv, _)),
                      has= len(setof(a, received(('Promise', _n, vn, vv, a)))) > acc_f)
        if voted and (max(voted)[1] is not None):
            return v == max(voted)[1]
        else:
            return True

def main():
    nproposers = int(sys.argv[1]) if len(sys.argv) > 1 else 5
    nacceptors = int(sys.argv[2]) if len(sys.argv) > 2 else 10
    nrounds = int(sys.argv[3]) if len(sys.argv) > 3 else 1
    timeout = int(sys.argv[4]) if len(sys.argv) > 4 else 5
    f = int((nacceptors-1)/3)
    quorum = int(nacceptors/2 + f)

    # start the controller
    ctl = new(controller.Controller, num= 1)
    setup(ctl, (nacceptors + nproposers,))
    start(ctl)

    acceptors = new(Acceptor, num=nacceptors)
    proposers = new(Proposer, num=nproposers)
    setup(acceptors, (ctl, acceptors, proposers, quorum, f))
    setup(proposers, (ctl, acceptors, quorum, f, nrounds, timeout))
    start(acceptors)
    start(proposers)
