module IncAST
{
    mod = Module(fun* decls)
    
    fun = (identifier name, identifier* args, stmt* body)
    
    stmt = Comment(string text)
         
         | Return(expr? value)
         
         | For(identifier* vars, expr iter, stmt* body)
         | While(expr test, stmt* body)
         | If(expr test, stmt* body, stmt* orelse)
         
         | Pass | Break | Continue
         
         | Expr(expr value)
         
         | Assign(identifier* vars, expr value)
    
    expr = UnaryOp(unaryop op, expr operand)
         | BoolOp(boolop op, expr* values)
         | BinOp(expr left, operator op, expr right)
         | Compare(expr left, cmpop op, expr right)
         | IfExp(expr test, expr body, expr orelse)
         
         | Call(identifier func, expr* args)
         
         | Num(object n)
         | Str(string s)
         | NameConstant(singleton value)
         
         | Name(identifier id, expr_context ctx)
         | Tuple(expr* elts, expr_context ctx)
         | Attribute(expr value, identifier attr, expr_context ctx)
         
         | Comp(expr resexp, clause* clauses)
    
    clause = Member(identifier* vars, identifier rel)
           | Cond(expr cond)
    
    expr_context = Read | Write
    
    boolop = And | Or 
    
    operator = Add | Sub | Mult | Div | Mod | Pow | LShift 
             | RShift | BitOr | BitXor | BitAnd | FloorDiv
    
    unaryop = Invert | Not | UAdd | USub
    
    cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn
}
